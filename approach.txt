Hello there :)

That was a really nice problem with some interesting complexity. Probably one of the very few ones where I had to use pen & paper.

Key observations: 
<ul>
<li><b>P</b> doesn't matter, you should (almost) always fully solve the board. The baseline solution is to just move numbers one by one, row by row. There are probably some cases for small boards when fully solving is suboptimal but I decided to ignore those. </li>
<li>The penalty function is a little bit unusual in that 2x2 & 3x3 are really cheap, 4x4-6x6 are expensive and then it gets cheaper the larger they get.</li>
<li>Most of the moves are independent of each other and so the number of states explode quickly. Vanilla beam search will struggle here with anything bigger than tiny.</li>
</ul>

I use a divide-and-conquer (puzzle part) solution with beam search (pathfinding part) as a building block.

I have two basic cost functions and beam search is run with one of them. Standard manhattan distance (with potential non-linear scaling) and "split" function where every number is converted to a binary value that tells which subrectangle it belongs to. The value is the distance to the correct subrectangle. The second one greatly simplifies the complexity during splitting and makes it easier to detect duplicated states. There's a variation of latter one with simultanoues 4-way split.

Building blocks:
<ul>
<li><tt>solve_full></tt>: Solve NxM. Small -> beam search. Medium -> do a special 4-way split + 4 x standard beam search. Big -> run <tt>solve_split</tt>.</li>
<li><tt>solve_split></tt>: Split NxM. Small -> beam search (with "split" cost function). Big Square-ish -> run <tt>enable_split</tt> and solve 2 subrectangles separately. Rectangle -> Assume NxM (where N>M). Divide roughly into NxM/2 and NxM/2, solve separately and join them by a big180<sup>TM</sup> MxM rotation in the middle.</li>
<li><tt>enable_split</tt>: Make sure that two subrectangles with solved separately. In order to enable that, they need to have an exact number of each type of cell. This is achieved by a counting surplus/demand for each subrectangle and then by applying our standard binary labels to missing/surplus cells and running our standard beam search with split function.</li>
</ul>

It may sound a bit confusing but it's actually quite clear when you look in the code. 

The key parts were the parallel split (that is possible thanks to <tt>enable_split</tt>) to reduce the overall size of grid search runs. And the big180<sup>TM</sup> move to join results from two different subproblems - that way we never really have to cover huge distances for any numbers outside of the big moves.

I'd imagine there are many different overall strategies here that all yield somewhat similar results.


Random interesting bits:
<ul>
<li>Since I haven't included any "combo moves" in my state transition, I rely on decent beam width in order to arrive at the solution. Because of this and because of unpredictability of my execution time, I believe I use only half alotted time or less. Doubling beam width gives me ~1.5%.</li>
<li>It's quite probable that I will fail few cases since I have no time checks and no fallback if one of the beam search runs fails to find solution.</li>
<li>Somewhat silly/cool idea if someone had way too much time: after developing a set of approaches for every NxM rectangle and gathering stats about them (average score & running times), you can do DP over all of that in order to find a nearly-optimal way of solving each problem instance.</li>
<li>Using dist^1.75 instead of dist for normal beam search gave me ~1% improvement.</li>
<li>I only do 2x2 & 3x3 rotations outside of big180<sup>TM</sup>s. With 4x4 I actually get worse score. This may hint that there's a room for improvement for finding a better penalty function. </li>
</ul>

Overall, I wasn't sure if I wanted to participate or not. Last week together with [h]CatalinT[/h] and [h]wleite[/h] we did HashCode (where we failed miserably). But, we trained a bit beforehand and for me that was the first time I did any coding in C++ in 2 years (or pretty much almost any coding at all). I'm surprised that while I haven't forgot too much about C++, the biggest problem for me was to sit extended period of time in one place while being focused. It's hard :)


Oh and I'm not sure how the new platform works. Is it ok for me to post the source code?